---
layout: post
title: Misson_02
date: 2024-02-23 14:12:20 +0900
description: You’ll find this post in your `_posts` directory. Go ahead and edit it and re-build the site to see your changes. # Add post description (optional)
img:  # Add image post (optional)
fig-caption: mac.jpg
tags: [BackEnd]
---

# 1. 회원가입 
1. authorize-ROLE_INACTIVE로 설정.
2. DB에 추가 - userId와 password, role만 준다.
3. 필요 파일 - UserEntity, UserDto, JoinDto(회원가입에 필요한 정보만 넣어 User에 기입), JoinService, JoinController, WebSecurityConfig  

![Misson_02_Login](../assets/img/Misson_02/Misson_02_create_Inactive.png)

# 2. 로그인
1. LoginFilter 설정
2. UserDetails 구현 -> CustomUserDetails, (GrantedAuthorityt 설정)
3. UserDetailsService 구현 -> CustomUserDetailsService (loadUserByUsername 설정)
4. WebSecurityConfig에 addFilterAt에 LoginFilter 등록.

![Misson_02_Login](../assets/img/Misson_02/Misson_02_Login_Before_jwt.png)  
UserDetails, UserDetailsServeice를 구현하기 전이면 StackOverFlowError 나오는게 정상. 대신 log 찍은건 나와야 한다.  
UserDetails, UserDetailsServeice를 구현을 했다면 정상적으로 successful이 나와야 한다.  
![Misson_02_Login](../assets/img/Misson_02/Misson_02_Login_successful.png)  

# 3. JWT 등록
1. jwtTokenUtil을 만들어 토큰설정을 한다.(암호화, jwt정보담기-생성, jwt 토큰이 정상인지 확인, jwt가 정상이면 발급)
2. jwtTokenFilter를 만들어 필터를 구현한다. (Authorization 헤더가 null이 아니고 Bearer로 시작하는지, 그렇다면 jwt가 정상적인지 검사, 정상적이면 발급, SecurityContextHolder에 저장.)
3. WebSecurityConfig()에 .addFilterBefore을 설정하여 jwtFilter을 넣고, LoginFilter보다 먼저 실행하도록 설정한다.
4. LoginFiler 클래스의 successful을 설정한다.(로그인이 성공했다면 토큰을 발급 받고, Authorization 헤더에 추가한다.)
5. 토큰이 만들어졌으니 .hashRole()의 기능을 수행할 수 있을 것이다.   
```java
// 회원가입 후 권한이 inactive로 제대로 설정이 되었다면 접근가능.
.requestMatchers("/authorization/inactive")
.hasRole("INACTIVE")
```  
이제 /authorization/inactive에 접속이 가능하다.

# 4. 서비스를 사용하려면 권한이 ROLE_MEMBER이어야 한다. 일반 사용자로 권한 바꾸기.
1. ServiceController 만들기 - 발급 받은 토큰을 바탕으로 UserEntity를 업그레이드 한다.  
```java
String tokenUser = SecurityContextHolder.getContext().getAuthentication().getName();
// 토큰의 username을 가져옴. 토큰의 username을 바탕으로 정보를 업그레이드 하기 위함.
```
```java
@RequiredArgsConstructor
@RestController
@Slf4j
public class ServiceController {
    private final ServiceService service;
    // 그냥 ChangeToRoleMember를 만들어서 웹접근권한을 hashRole("INACTIVE").
    // 권한이 ROLE_INACTIVE이면 ROLE_MEMBER로 업데이트.
    // 토큰을 기반으로 정보를 알아내야 하니 토큰을 파싱하여 사용자 정보를 추출해보자.
    // => @RequestHeader("Authorization") String token
    @PutMapping("/changeToRoleMember")
    public String ChangeToRoleMember(
        @RequestParam("name")String name,
        @RequestParam("nickname")String nickname,
        @RequestParam("age")Integer age,
        @RequestParam("email")String email,
        @RequestParam("phone")Integer phone
    ) {
        String tokenUser = SecurityContextHolder.getContext().getAuthentication().getName();
        log.info("***************************** "+tokenUser);

        UserDto updateAuthorization
                = service.changeToRoleMember(
                        tokenUser,
                        name,
                        nickname,
                        age,
                        email,
                        phone);
        return updateAuthorization.toString();
    }
}
```
2. ServiceService 만들기 - 토큰의 username을 가지고 jpa에서 찾고, 업데이트 진행.
```java
@Slf4j
@Service
@RequiredArgsConstructor
public class ServiceService {
    private final UserRepository userRepository;

    public UserDto changeToRoleMember(
        String tokenUsername,
        String name,
        String nickname,
        Integer age,
        String email,
        Integer phone
    ) {
        // 권한을 member로 설정.
        String role = "ROLE_MEMBER";

        // 토큰을 파싱하여 사용자 정보 추출하기.
        Optional<User> username = userRepository.findByUsername(tokenUsername);

        User usernameInToken = username.orElseThrow(() -> new UsernameNotFoundException(tokenUsername));

        log.info("*** 토큰파싱: {} ***", usernameInToken.getUsername());

        usernameInToken.setRole(role);
        usernameInToken.setName(name);
        usernameInToken.setNickname(nickname);
        usernameInToken.setAge(age);
        usernameInToken.setEmail(email);
        usernameInToken.setPhone(phone);

        Map<String, ? extends Serializable> properties = Map.of(
                "Role", usernameInToken.getRole(),
                "Name", usernameInToken.getName(),
                "Nickname", usernameInToken.getNickname(),
                "Age", usernameInToken.getAge(),
                "Email", usernameInToken.getEmail(),
                "Phone", usernameInToken.getPhone(),
                "Username", usernameInToken.getUsername(),
                "Password", usernameInToken.getPassword(),
                "Id", usernameInToken.getId()
        );



        log.info("*** 서비스를 사용하기 위한 Member로 권한 변경 ***");
        log.info("*** user: {}, role: {} ***", usernameInToken.getUsername(), usernameInToken.getRole());
        properties.forEach((key, value) -> {
            log.info("{}, {}", key, value);
        });
        userRepository.save(usernameInToken);
        return UserDto.fromEntityMember(usernameInToken, role);
    }

}
```

![Misson_02_Login](../assets/img/Misson_02/Misson_02_Change_Authorization.png)  

# 일반 사용자는 사업자 등록번호를 전달해 사없자 사용자르 전환신청을 할 수 있다.
1. 우선 간단하게 일반 사용자만 접근할 수 있는 url에 사업자 등록번호를 전달하면 사엽자 사용자로 업그레이드 하도록 하자.
2. 그 후 Validation을 사용하여 글자 수 를 사업자 등록번호 만큼 제한 설정한다. validation을 사용하면 이거만 고치는거니 groups이 필요하겠지만 코드의 복잡도가 올라가고 지저분하다는 것을 생각하여 폼 객체와 수정용 폼 객체를 분해해서 DTO를 사용해서 수정하자.


# 중고거래 중개하기 - 중고물건 게시글 올리기
- 물품 등록
    - 일반 사용자는 중고 거래를 목적으로 물품에 대한 정보를 등록할 수 있다.
        - 제목, 설명, 대표 이미지, 최소 가격이 필요하다.
            - <span style="color:red"> 대표 이미지는 반드시 함께 등록될 필요는 없다. => 추후 진행 예정
            - 다른 항목은 필수이다.
            - 최초로 물품이 등록될 때, 중고 물품의 상태는 **판매중** 상태가 된다.
    - 등록된 물품 정보는 비활성 사용자를 제외 누구든지 열람할 수 있다.(webSecurityConfig에서 진행.)
        - ~~등록자의 광역자치단체 단위의 지역 정보가 같이 기재된다.~~
        - 사용자의 상세 정보는 공개되지 않는다.
    - 등록된 물품 정보는 작성자가 수정, 삭제가 가능하다.

1. RegisterEntity
    - User table과 many to one 연관관계 생성.
    - title, content, minPrice, (picture) 필요.
    - <span style="color:red">현재는 picture을 빼고 진행하겠음.
2. ReisterDto
    - 응답을 dto로 설정을 할 것이다. fromEntity를 만들자.
3. RegisterRepository
4. ReisterController - 중고 물품 등록.
    - 게시물 생성 요청.
5. RegisterService
    - 요청 받은 데이터를 User에 저장.
    - dto에 저장해서 반환.

![Register_addRegisterItem](../assets/img/Misson_02/Misson02_Register_addRegisterItem.png)


![Register_Repository](../assets/img/Misson_02/Misson02_Register_Repository.png)

6. RegisterController - 등록한 중고 물품 확인, inactive 권한말고 다 볼 수 있음.
![Register_Repository](../assets/img/Misson_02/Misson02_Register_RegisterBoards.png)

7. 등록된 물품 정보는 작성자가 수정, 삭제가 가능하다.
게시글의 작성자인지 확인하는 메서드 필요.
- 업데이트
![Register_Repository](../assets/img/Misson_02/Misson02_Register_Update_01.png)

![Register_Repository](../assets/img/Misson_02/Misson02_Register_Update_02.png)

![Register_Repository](../assets/img/Misson_02/Misson02_Register_Update_03.png)

- 삭제
![Register_Repository](../assets/img/Misson_02/Misson02_Register_delete_01.png)

![Register_Repository](../assets/img/Misson_02/Misson02_Register_delete_02.png)




- 구매 제안
    - **물품을 등록한 사용자**와 **비활성 사용자** 제외, 등록된 물품에 대하여 구매 제안을 등록할 수 있다.
    - 등록된 구매 제안은 **물품을 등록한 사용자**와 **제안을 등록한 사용자**만 조회가 가능하다.
        - **제안을 등록한 사용자**는 자신의 제안만 확인이 가능하다.
        ![Register_Repository](../assets/img/Misson_02/Misson02_구매제안한사람.png)
        - **물품을 등록한 사용자**는 모든 제안이 확인 가능하다.
        ![Register_Repository](../assets/img/Misson_02/Misson02_판매자는모든구매제안을볼수있다..png)
    - **물품을 등록한 사용자**는 ****등록된 구매 제안을 수락 또는 거절할 수 있다.
        - 이때 구매 제안의 상태는 **수락** 또는 **거절**이 된다.
        ![Register_Repository](../assets/img/Misson_02/Misson02_제안거절.png)  
        ![Register_Repository](../assets/img/Misson_02/Misson02_제안결정.png)
    - **제안을 등록한 사용자**는 자신이 등록한 제안이 수락 상태일 경우, 구매 확정을 할 수 있다.
        - 이때 구매 제안의 상태는 **확정** 상태가 된다.
        - 구매 제안이 확정될 경우, 대상 물품의 상태는 **판매 완료**가 된다.
        - 구매 제안이 확정될 경우, 확정되지 않은 다른 구매 제안의 상태는 모두 **거절**이 된다.
        ![Register_Repository](../assets/img/Misson_02/Misson02_구매확정하면다른제안상태거절.png)  
        ![Register_Repository](../assets/img/Misson_02/Misson02_구매확정을하면물품판매완료가된다..png)




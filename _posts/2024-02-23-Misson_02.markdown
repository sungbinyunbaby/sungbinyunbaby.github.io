---
layout: post
title: Misson_02
date: 2024-02-23 14:12:20 +0900
description: You’ll find this post in your `_posts` directory. Go ahead and edit it and re-build the site to see your changes. # Add post description (optional)
img:  # Add image post (optional)
fig-caption: mac.jpg
tags: [BackEnd]
---

# 1. 회원가입 
1. authorize-ROLE_INACTIVE로 설정.
2. DB에 추가 - userId와 password, role만 준다.
3. 필요 파일 - UserEntity, UserDto, JoinDto(회원가입에 필요한 정보만 넣어 User에 기입), JoinService, JoinController, WebSecurityConfig  

![Misson_02_Login](../assets/img/Misson_02/Misson_02_create_Inactive.png)

# 2. 로그인
1. LoginFilter 설정
2. UserDetails 구현 -> CustomUserDetails, (GrantedAuthorityt 설정)
3. UserDetailsService 구현 -> CustomUserDetailsService (loadUserByUsername 설정)
4. WebSecurityConfig에 addFilterAt에 LoginFilter 등록.

![Misson_02_Login](../assets/img/Misson_02/Misson_02_Login_Before_jwt.png)  
UserDetails, UserDetailsServeice를 구현하기 전이면 StackOverFlowError 나오는게 정상. 대신 log 찍은건 나와야 한다.  
UserDetails, UserDetailsServeice를 구현을 했다면 정상적으로 successful이 나와야 한다.  
![Misson_02_Login](../assets/img/Misson_02/Misson_02_Login_successful.png)  

# 3. JWT 등록
1. jwtTokenUtil을 만들어 토큰설정을 한다.(암호화, jwt정보담기-생성, jwt 토큰이 정상인지 확인, jwt가 정상이면 발급)
2. jwtTokenFilter를 만들어 필터를 구현한다. (Authorization 헤더가 null이 아니고 Bearer로 시작하는지, 그렇다면 jwt가 정상적인지 검사, 정상적이면 발급, SecurityContextHolder에 저장.)
3. WebSecurityConfig()에 .addFilterBefore을 설정하여 jwtFilter을 넣고, LoginFilter보다 먼저 실행하도록 설정한다.
4. LoginFiler 클래스의 successful을 설정한다.(로그인이 성공했다면 토큰을 발급 받고, Authorization 헤더에 추가한다.)
5. 토큰이 만들어졌으니 .hashRole()의 기능을 수행할 수 있을 것이다.   
```java
// 회원가입 후 권한이 inactive로 제대로 설정이 되었다면 접근가능.
.requestMatchers("/authorization/inactive")
.hasRole("INACTIVE")
```  
이제 /authorization/inactive에 접속이 가능하다.

# 4. 서비스를 사용하려면 권한이 ROLE_MEMBER이어야 한다. 일반 사용자로 권한 바꾸기.
1. ServiceController 만들기 - 발급 받은 토큰을 바탕으로 UserEntity를 업그레이드 한다.  
```java
String tokenUser = SecurityContextHolder.getContext().getAuthentication().getName();
// 토큰의 username을 가져옴. 토큰의 username을 바탕으로 정보를 업그레이드 하기 위함.
```
```java
@RequiredArgsConstructor
@RestController
@Slf4j
public class ServiceController {
    private final ServiceService service;
    // 그냥 ChangeToRoleMember를 만들어서 웹접근권한을 hashRole("INACTIVE").
    // 권한이 ROLE_INACTIVE이면 ROLE_MEMBER로 업데이트.
    // 토큰을 기반으로 정보를 알아내야 하니 토큰을 파싱하여 사용자 정보를 추출해보자.
    // => @RequestHeader("Authorization") String token
    @PutMapping("/changeToRoleMember")
    public String ChangeToRoleMember(
        @RequestParam("name")String name,
        @RequestParam("nickname")String nickname,
        @RequestParam("age")Integer age,
        @RequestParam("email")String email,
        @RequestParam("phone")Integer phone
    ) {
        String tokenUser = SecurityContextHolder.getContext().getAuthentication().getName();
        log.info("***************************** "+tokenUser);

        UserDto updateAuthorization
                = service.changeToRoleMember(
                        tokenUser,
                        name,
                        nickname,
                        age,
                        email,
                        phone);
        return updateAuthorization.toString();
    }
}
```
2. ServiceService 만들기 - 토큰의 username을 가지고 jpa에서 찾고, 업데이트 진행.
```java
@Slf4j
@Service
@RequiredArgsConstructor
public class ServiceService {
    private final UserRepository userRepository;

    public UserDto changeToRoleMember(
        String tokenUsername,
        String name,
        String nickname,
        Integer age,
        String email,
        Integer phone
    ) {
        // 권한을 member로 설정.
        String role = "ROLE_MEMBER";

        // 토큰을 파싱하여 사용자 정보 추출하기.
        Optional<User> username = userRepository.findByUsername(tokenUsername);

        User usernameInToken = username.orElseThrow(() -> new UsernameNotFoundException(tokenUsername));

        log.info("*** 토큰파싱: {} ***", usernameInToken.getUsername());

        usernameInToken.setRole(role);
        usernameInToken.setName(name);
        usernameInToken.setNickname(nickname);
        usernameInToken.setAge(age);
        usernameInToken.setEmail(email);
        usernameInToken.setPhone(phone);

        Map<String, ? extends Serializable> properties = Map.of(
                "Role", usernameInToken.getRole(),
                "Name", usernameInToken.getName(),
                "Nickname", usernameInToken.getNickname(),
                "Age", usernameInToken.getAge(),
                "Email", usernameInToken.getEmail(),
                "Phone", usernameInToken.getPhone(),
                "Username", usernameInToken.getUsername(),
                "Password", usernameInToken.getPassword(),
                "Id", usernameInToken.getId()
        );



        log.info("*** 서비스를 사용하기 위한 Member로 권한 변경 ***");
        log.info("*** user: {}, role: {} ***", usernameInToken.getUsername(), usernameInToken.getRole());
        properties.forEach((key, value) -> {
            log.info("{}, {}", key, value);
        });
        userRepository.save(usernameInToken);
        return UserDto.fromEntityMember(usernameInToken, role);
    }

}
```

![Misson_02_Login](../assets/img/Misson_02/Misson_02_Change_Authorization.png)  



